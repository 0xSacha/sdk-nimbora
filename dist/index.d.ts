import { constants, Account, Provider, SignerInterface } from 'starknet';
export declare class NimboraSDK {
    protected provider: Account | Provider;
    protected signer: SignerInterface | undefined;
    protected chainId: constants.StarknetChainId;
    constructor(provider: Account | Provider | undefined);
    checkChainId(provider: Account | Provider): Promise<void>;
    protected getBalance: (props: import("./config/types").GetBalanceProps) => Promise<bigint>;
    protected getAllowance: (props: import("./config/types").GetAllowanceProps) => Promise<bigint>;
    protected getTotalSupply: (tokenAddress: string) => Promise<bigint>;
    protected getGasPrice: () => Promise<bigint>;
    protected getLiquityManagerContract: () => import("starknet").Contract;
    protected getTokenContract: (tokenAddress: string) => import("starknet").Contract;
    protected getEthContract: () => import("starknet").Contract;
    protected getLusdContract: () => import("starknet").Contract;
    protected getTroveContract: (troveAddress: string) => import("starknet").Contract;
    protected getOracleContract: () => import("starknet").Contract;
    protected getBatchGasUnitLiquity: (troveAddress: string) => Promise<bigint>;
    protected getBatchGasUnitPerUserLiquity: (troveAddress: string) => Promise<bigint>;
    protected getBatchGasFeePerUserLiquity: (troveAddress: string) => Promise<bigint>;
    protected getGasTankLiquity: (troveAddress: string) => Promise<bigint>;
    protected getAllowanceLiquity: (props: import("./config/types").GetAllowanceLiquityProps) => Promise<import("./config/types").GetAllowanceLiquityRes>;
    protected getBatchCounterLiquity: (troveAddress: string) => Promise<bigint>;
    protected getLastHandledBatchNonceLiquity: (troveAddress: string) => Promise<bigint>;
    protected getUsersInBatchLiquity: (props: import("./config/types").GetUsersInBatchLiquityProps) => Promise<import("./config/types").GetUsersInBatchLiquityRes>;
    protected getUserAmountInBatchLiquity: (props: import("./config/types").GetUserAmountInBatchLiquityProps) => Promise<import("./config/types").GetUserAmountInBatchLiquityRes>;
    protected getUserGasInBatchLiquity: (props: import("./config/types").GetUserGasInBatchLiquityProps) => Promise<bigint>;
    protected getNumberOfUsersToCloseBatchLiquity: (troveAddress: string) => Promise<bigint>;
    protected getTotalRequiredGasFeeToCloseBatchLiquity: (troveAddress: string) => Promise<bigint>;
    protected getTotalTroveDebtLiquity: (troveAddress: string) => Promise<bigint>;
    protected getRemainingGasFeeToCloseBatch: (troveAddress: string) => Promise<bigint>;
    protected getUserDebtLiquity: (props: import("./config/types").GetUserDebtLiquityProps) => Promise<bigint>;
    protected getLUSDTotalSupply: () => Promise<bigint>;
    protected getRequiredGasFeeToParticipateCurrrentBatchLiquity: (props: import("./config/types").GetRequiredGasFeeToParticipateCurrrentBatchLiquityProps) => Promise<bigint>;
    protected checkTrove: (troveAddress: string) => boolean;
    protected checkBalanceBorrowLiquity: (props: import("./config/types").CheckBalanceBorrowLiquityProps) => Promise<boolean>;
    protected checkBalanceRepayLiquity: (props: import("./config/types").CheckBalanceRepayLiquityProps) => Promise<import("./config/types").CheckBalanceRepayLiquityRes>;
    protected checkAllowanceBorrowLiquity: (props: import("./config/types").CheckAllowanceBorrowLiquityProps) => Promise<boolean>;
    protected checkAllowanceRepayLiquity: (props: import("./config/types").CheckAllowanceRepayLiquityProps) => Promise<import("./config/types").CheckAllowanceRepayLiquityRes>;
    protected buildCallDataApproveBorrowLiquity: (props: import("./config/types").BuildCallDataApproveBorrowLiquityProps) => Promise<import("starknet").Call>;
    protected buildCallDataApproveRepayLiquity: (props: import("./config/types").BuildCallDataApproveRepayLiquityProps) => Promise<import("./config/types").BuildCallDataApproveRepayLiquityRes>;
    protected buildCallDataBorrowLiquity: (props: import("./config/types").BuildCallDataBorrowLiquityProps) => Promise<import("starknet").Call>;
    protected buildCallDataRepayLiquity: (props: import("./config/types").BuildCallDataRepayLiquityProps) => Promise<import("starknet").Call>;
    protected handleBorrowLiquity: (props: import("./config/types").handleBorrowLiquityProps) => Promise<string>;
    protected handleRepayLiquity: (props: import("./config/types").handleRepayLiquityProps) => Promise<string>;
}
